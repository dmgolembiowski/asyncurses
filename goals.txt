1. Define a coroutine wrapper that covers the essential startup for a curses
    application in Python, namely:
        ```
        # Launching the app
        import curses
        stdscr = curses.initscr()
        curses.noecho()
        curses.cbreak() <- This one's questionable, as the usual buffer mode
                            might actually be useful in the asynchronous
                            context.
        stdscr.keypad(True) 

        ...
        # And closing the app
        curses.nocbreak() <- If the buffer mode is not broken
        stdscr.keypad(False)
        curses.echo()
        curses.endwin()
        ```
2. Explore whether the following needs to have any additional/fewer calls:
   from curses import wrapper

   def main(stdscr):
       # Clear screen
       stdscr.clear()

       # This raises ZeroDivisionError when i == 10.
       for i in range(0, 11):
           v = i-10
           stdscr.addstr(i, 0, '10 divided by {} is {}'.format(v, 10/v))

       stdscr.refresh()
       stdscr.getkey()

   wrapper(main)

3. (Ambitious part)
Define an internal engine like Yuri's minimal asyncio event loop at dgolembiowski.com/raymond


